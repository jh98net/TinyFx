/*
  ！确保文件 utf8 + LF
  ！环境变量配置：
      变量名；ASPNETCORE_ENVIRONMENT 或 NETCORE_ENVIRONMENT
      可选值：Development/Testing/Staging/Production
  ！添加一下配置到.csproj中，如：
  <ItemGroup>
    <None Update="appsettings.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="appsettings.Development.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <DependentUpon>appsettings.json</DependentUpon>
    </None>
    <None Update="appsettings.Production.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <DependentUpon>appsettings.json</DependentUpon>
    </None>
  </ItemGroup>
  */
{
  // #region ******** Common ********

  // 项目信息配置 (TinyFx.Configuration.ProjectSection)
  "Project": {
    "ProjectId": "Nnbr.WebAPI", //项目标识确保唯一
    "Description": "百人牛牛-WebAPI", //项目描述
    "ConsoleLogLevel": "Debug", //LogUtil.ConsoleLogger的日志级别，如果使用Serilog则无效
    "ResponseErrorDetail": true //是否返回客户端错误详细信息
  },

  // 自定义配置信息 (TinyFx.Configuration.AppSettingsSection)
  "AppSettings": [
    {
      "Key": "myKey", //配置键
      "Value": "myValue" //配置值
    }
  ],

  // 数据库配置 (TinyFx.Data.Configuration.DataSection)
  "Data": {
    "DefaultConnectionStringName": "default", // 默认数据库连接
    "DataRouter": "",
    "InstProvider": "",
    "ConnectionStrings": [
      {
        "Name": "default",
        "ProviderName": "mysql",
        "ConnectionString": "server=172.28.99.21;user id=root;pwd=root;database=ldzb;Allow User Variables=True",
        "ReadConnectionString": "", // 支持读写分离
        "CommandTimeout": "30",
        "InstProvider": "",
        "OrmMap": "" // 映射此数据库连接的命名空间集合，用;分隔
      }
    ]
  },

  // 日志 (TinyFx.Extensions.Serilog)
  "Serilog": {
    "Custom": {
      "RequestLogging": false // 记录HTTP简化请求日志
    },
    "Using": [
      "Serilog.Sinks.Console",
      "Serilog.Sinks.File",
      "Serilog.Sinks.Async",
      "Serilog.Sinks.Seq"
    ],
    "MinimumLevel": {
      "Default": "Verbose", // 日志级别限制：Verbose|Debug|Information|Warning|Error|Fatal
      "Override": {
        "Microsoft": "Warning",
        "System": "Warning"
      }
    },
    "WriteTo": [
      {
        "Name": "Console",
        "Args": {
          "restrictedToMinimumLevel": "Debug",
          "theme": "Serilog.Sinks.SystemConsole.Themes.AnsiConsoleTheme::Code, Serilog.Sinks.Console",
          "outputTemplate": "[{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj}{NewLine}{Exception}"
        }
      },
      {
        "Name": "Async",
        "Args": {
          "configure": [
            {
              "Name": "File",
              "Args": {
                "restrictedToMinimumLevel": "Information",
                "path": "./logs/log.txt",
                "rollingInterval ": "Day", // 滚动文件名生成策略。如：log20190101.txt
                "retainedFileCountLimit": "31", // 文件保留数限制,不限制 = null
                "outputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}"
              }
            }
          ]
        }
      },
      {
        "Name": "TinyFxMySQL",
        "Args": {
          "enabled": true,
          "restrictedToMinimumLevel": "Error",
          "connectionString": "default",
          "tableName": "s_log",
          "storeTimestampInUtc": "false",
          "batchSize": 100 //批量提交数
        }
      },
      {
        "Name": "Seq",
        "Args": {
          "serverUrl": "http://localhost:5341",
          "apiKey": "none",
          "restrictedToMinimumLevel": "Error"
        }
      },
      {
        "Name": "Elasticsearch",
        "Args": {
          "restrictedToMinimumLevel": "Information",
          "nodeUris": "http://172.28.99.23:9200;http://172.28.99.23:9300", // 多个;分割
          "indexFormat": "index-{0:yyyy.MM.dd}", // 索引名称格式化程序。 使用该事件的DateTimeOffset的string.Format在此字符串上运行。

          "autoRegisterTemplate": true, //默认false。设置为true时，接收器将为Elasticsearch中的日志注册一个索引模板。 该模板经过优化，可以处理serilog事件
          "autoRegisterTemplateVersion": "ESv7",
          "emitEventFailure": "WriteToSelfLog,WriteToFailureSink,RaiseCallback",
          "failureSink": "TinyFx.Extensions.Serilog.ElasticsearchFailureSink, TinyFx.Extensions.Serilog" // Elasticsearch失败时写入本地文件./logs/log.txt
          /*
          "templateName": "myCustomTemplate", // 使用AutoRegisterTemplate功能时，这可以让您覆盖默认模板
          "typeName": "logevent", // 用于日志事件的默认elasticsearch类型名称
          "batchPostingLimit": 50, // 单个批次中要发布的最大事件数
          "period": 2000, // 在检查事件批次之间等待的时间（时间跨度）
          "inlineFields": false, //当true字段将被写入json文档的根目录
          "bufferBaseFilename": "", //目录的可选路径，可以用作日志传送缓冲区以提高日志转发的可靠性。
          "bufferFileSizeLimitBytes": null, //允许特定日期的缓冲区日志文件增加到的最大大小（以字节为单位）。 默认情况下，没有限制。
          "bufferLogShippingInterval": 5000, //检查缓冲区文件之间的时间间隔（以毫秒为单位）。
          "pipelineName": "",
          "bufferRetainedInvalidPayloadsLimitBytes": 5000,
          "bufferFileCountLimit": 31,
          "connectionGlobalHeaders": "Authorization=Bearer SOME-TOKEN;OtherHeader=OTHER-HEADER-VALUE",
          "connectionTimeout": 5, //将批量操作发送到Elasticsearch时的连接超时（时间跨度）
          "emitEventFailure": "WriteToSelfLog",
          "queueSizeLimit": "100000",
          "overwriteTemplate": false,
          "registerTemplateFailure": "IndexAnyway",
          "deadLetterIndexName": "deadletter-{0:yyyy.MM}",
          "numberOfShards": 20,
          "numberOfReplicas": 10,

          "formatProvider": "", //提供特定于文化的格式信息
          "connection": "", //允许您覆盖用于与elasticsearch通信的连接
          "serializer": "", //当传递序列化程序时，未知对象将被序列化为对象，而不是依赖于它们的ToString表示形式
          "connectionPool": "", //描述事件要写入的集群的连接池
          "customFormatter": "", //自定义将日志事件转换为ElasticSearch文档时使用的格式化程序。 请注意，格式化程序输出必须是有效的JSON
          "customDurableFormatter": "" //自定义将日志事件转换为持久接收器时使用的格式化程序。 请注意，格式化程序输出必须是有效的JSON
          */
        }
      }
    ],
    "Enrich": [ "WithTemplateHash" ],
    "Destructure": [],
    "Filter": [],
    "Properties": {}
  },

  // Redis配置 (TinyFx.Extensions.StackExchangeRedis.Configuration.RedisSection)
  "Redis": {
    "DefaultConnectionStringName": "default", // 默认redis连接
    "ConnectionStrings": [
      {
        "Name": "default",
        /*
        defaultDatabase=1 默认数据库索引, 从 0 到 databases - 1
        keepAlive=-1 如果在指定时间(seconds)内没有活动，那么发送一条信息来帮助socket保持连接
        password=null Redis服务器密码

        responseTimeout=SyncTimeout 时间（ms）来判断套接字是否不健康
        name=null 唯一名称，用来识别Redis里面的连接
        abortConnect=true  如果是 true，当没有可用的服务器时 Connect 不会创建连接              
        allowAdmin=false  如果是 true，开启一些被认为是有风险的命令
        channelPrefix=null  所有 pub/sub 操作的可选通道前缀{string}
        connectRetry=3  在初始化 Connect 时，连接重试次数
        connectTimeout=5000 连接超时设置，时间单位是ms
        configChannel="__Booksleeve_MasterChanged" 设置广播通道名称
        configCheckSeconds=60 检查配置的时间（秒）。如果支持，这可用作交互式套接字的保持活动状态。
        proxy=Proxy.None 使用的代理类型 (如果有的话); 例如 “twemproxy”
        resolveDns=false 指定DNS解析方式是显示而不是隐式
        ssl=false 指定使用SSL加密
        sslHost=null 强制SSL主机识别，需要使用服务器端证书
        sslProtocols=null 使用加密连接时支持Ssl/Tls版本。使用'|' 提供多个价值观。
        syncTimeout=5000 异步超时设置(ms)
        tiebreaker="__Booksleeve_TieBreak" 用于在模糊主方案中选择服务器的密钥
        writeBuffer=4096 输出缓存区的大小
        version="2.0" Redis 版本级别 (该选项是非常有用的，当服务器不可用时)
        serviceName=null 当前没有实现
        */
        "ConnectionString": "172.28.41.215:6379,password=4Ih4eOrSZsU62ZB,defaultDatabase=0,keepAlive=-1",
        "SerializeMode": "json",
        "NamespaceMap": "" // 映射此redis连接的命名空间集合，用;分隔
      }
    ]
  },

  // 消息队列 (TinyFx.Extensions.RabbitMQ.RabbitMQSection)
  "RabbitMQ": {
    "DefaultConnectionStringName": "default",
    "DefaultSubIdSuffix": null,
    "LogEnabled": false,
    "ConnectionStrings": [
      {
        "Name": "default",
        /*
        host: 主机host1:5672,host2:5672
        virtualHost: 默认虚拟主机'/'
        username: 用户名，默认guest
        password: 密码，默认guest
        requestedHeartbeat: 默认值为10秒。设置为零表示无心跳
        prefetchcount: 在EasyNetQ发送确认之前RabbitMQ将传递的消息数。默认50,0表示无限预取，1可以在一组消费者中平衡工作
        publisherConfirms: 默认false，表示publisher发布的消息不保证实际送达。true:(timeout参数表示过期) 建议用bus.PubSub.PublishAsync(msg).ContinueWith(task=>{ if(task.IsCompleted && !task.IsFaulted){ OK.. }});
        persistentMessages: 默认true，RabbitMQ消息持久化
        product: 产品名称，将显示在RabbitMQ 的管理界面中
        platform: 平台名称，默认主机名，将显示在RabbitMQ 的管理界面中
        timeout: 默认10秒，0不限制
        */
        "ConnectionString": "host=host1:5672,host2:5672;username=root;password=root;publisherConfirms=true;timeout=60"
      }
    ],
    "MessageAssemblies": [], //用于注册消息发送
    "ConsumerAssemblies": [] //用于自动注册消费类
  },

  // AutoMapper (TinyFx.Extensions.AutoMapper.AutoMapperSection)
  "AutoMapper": {
    "Assemblies": [
      "" // 需要自动注册的dll名称
    ]
  },

  // 随机数设置 (TinyFx.Randoms.RandomSection)
  "Random": {
    "DefaultProviderName": "default",
    "Providers": [
      {
        "Name": "default",
        "RandomType": "TinyFx.Randoms.RNGReader,TinyFx",
        "Options": {
          "Enabled": false,
          "RouletteSamplingCount": 100000, //抽取采样总数
          "ShuffleSamplingCount": 100000, //洗牌采样总数
          "RouletteDeviation": 20, //采样偏差: 抽取 - n取1偏差量，20表示偏差20%
          "ShuffleDeviation": 20, //采样偏差: 洗牌 - n取size偏差量，20表示偏差20%
          "CheckInterval": 10000 //监测间隔
        }
      }
    ]
  },

  //jwt验证 (TinyFx.Security.JwtAuthSection)
  "JwtAuth": {
    "DebugToken": "", // Debug时的Token（仅Development，用于设置默认swagger的jwt）
    "SignSecret": "ABASDfasfwe@#45346dfg",
    "DynamicSignSecret": true,
    "EncryptSecret": "",
    "Issuer": "tinyfx.com",
    "Audience": "tinyfx.com",
    "ValidateLifetime": false, //是否验证过期
    "ExpiresMinute": 30 // Token过期时间（分钟）,一年525600
  },

  // DotNetty WebSocket Server (TinyFx.Extensions.DotNetty.Configuration.DotNettySection)
  "DotNetty": {
    "Server": {
      "Enabled": true,
      "UseLibuv": true,
      "Protocol": "WebSocket",
      "Port": 80,
      "ReadIdelTimeOut": 0, // 秒 0-服务器被动心跳
      "ConnectTimeout": 5000, //连接5秒超时
      "SoBacklog": 2048, //排队
      "LogLevel": "DEBUG", // TRACE,DEBUG,INFO,WARN,ERROR
      "Ssl": false,
      "SslCer": "dotnetty.com.pfx",
      "SslPassword": "password",
      "EnableReceiveEvent": false,
      "EnableSendEvent": false,
      "EnableClosedEvent": false,
      "EnableHeartbeatEvent": true,
      "IsLittleEndian": false,
      "CheckSessionInterval": 0, //检查未登录Session的间隔时间, 小于等于0不检查
      "CheckSessionTimeout": 5000, //未登录Session的Timeout时间（防止空连接），小于等于0不检查
      "Assemblies": [] //继承RespondCommand<,>或标记ProtoPushAttribute的类所在Assembly，默认Assembly.GetEntryAssembly()
    },
    "Clients": [
      //暂未完成
      {
        "Name": "ws-server",
        "Protocol": "WebSocket",
        "Host": "127.0.0.1",
        "Port": 2008,
        "Path": "",
        "Ssl": false,
        "Assemblies": []
      }
    ]
  },

  // HttpClientEx配置 (TinyFx.Net.HttpClient.HttpClientSection)
  "HttpClient": {
    "Clients": [
      {
        "Name": "pala",
        "SerializeMode": "json", //序列化类型:json,protobuf,xml
        "Encoding": null, //默认UTF8
        "BaseAddress": "https://api.github.com/",
        "RequestHeaders": [], //key-value格式,与Settings相同
        "Timeout": 5000, // 请求超时时长（毫秒）
        "RetryCount": 3, //重试次数，暂时无效
        "Settings": [
          {
            "Key": "PartnerId",
            "Value": "OurGame"
          },
          {
            "Key": "Currency",
            "Value": "USD"
          }
        ]
      }
    ]
  },

  // SMS
  "SMS": {
    "DefaultClientName": "default",
    "Clients": [
      {
        "Name": "default",
        "Provider": "tencent",
        "Debug": true,
        "ExpireMinutes": 5,
        "RequestUrl": "https://yun.tim.qq.com/v5/tlssmssvr/sendsms",
        "AppId": "",
        "AppKey": "",
        "TplId": 0,
        "Sign": ""
      }
    ]
  },

  // SmtpClientEx 配置 (TinyFx.Net.Email.SmtpSection)
  "Smtp": {
    "DefaultClientName": "default",
    "Clients": [
      {
        "Name": "default",
        "Host": "smtp.163.com",
        "Port": 25,
        "FromAddress": "18910648185@163.com",
        "FromName": "master",
        "UserName": "18910648185@163.com",
        "Password": "ZYKWAVQEEBIVBZZW",
        "UseSsl": false
      }
    ],
    "SendTos": [
      {
        "Name": "default",
        "To": [ "" ],
        "CC": [ "" ]
      }
    ]
  },

  // 无效- 验证码 (TinyFx.Libs.Captchas.CaptchaSection)
  "Captcha": {
    "DefaultProviderName": "default",
    "Providers": [
      {
        "Name": "default", // 验证码提供程序名称
        "CodeLength": "4", // 验证码长度
        "CodeScope": 1, // 验证码字符范围，CodeScope枚举值(1-数字 6-字母 7-数字字母 8-汉字)
        "GeneratorType": "", // 实现ICaptchaImageGenerator的类
        "ImageWidth": 100, // 验证码宽
        "ImageHeight": 36, // 验证码高
        "ExpiryMinutes": 30, //过期分钟数
        "IgnoreCase": true // 是否忽略大小写
      }
    ]
  },

  // #endregion ******** Common ********

  // #region ******** Asp.Net ********

  // api访问过滤
  "ApiAccessFilter": {
    "DefaultFilterName": "default",
    "Filters": [
      {
        "Name": "default",
        "Enabled": true,
        "AllowIps": "intranet" // 允许ip列表，;分割，Intranet内网。
      }
    ]
  },

  // 全局异常处理 (TinyFx.AspNet.GlobalException.GlobalExceptionSection)
  "GlobalException": {
    "HandleType": "Json", // Json,Page,Both
    "JsonHandleUrlKeys": "/api/;", //Json处理方式的Url关键字;分割
    "ErrorHandingPath": "/error", // Page处理方式错误跳转页面
    "exceptionStatusCodeDic": [
      {
        "StatusCode": "401",
        "Message": "未授权的请求"
      },
      {
        "StatusCode": "404",
        "Message": "找不到该页面"
      },
      {
        "StatusCode": "403",
        "Message": "访问被拒绝"
      },
      {
        "StatusCode": "500",
        "Message": "服务器发生意外的错误"
      }
    ]
  },

  // Asp.net core CORS跨域请求配置 (TinyFx.AspNet.Configuration.CorsSection)
  "Cors": {
    "Policies": [
      {
        "Name": "(default)", // 策略名称，默认(default)
        "Origins": "*", // 允许的来源,分号;分隔（下同）
        "Methods": "*", // 允许的HTTP方法
        "Headers": "*" // 允许的请求标头
      }
    ],
    "UseCors": {
      "Enabled": true,
      "PolicyName": ""
    }
  },

  // API版本控制 (TinyFx.AspNet.Configuration.ApiVersioningSection)
  "ApiVersioning": {
    "Mode": "QueryString"
  },

  // Swagger (TinyFx.AspNet.Swagger.SwaggerSection)
  "Swagger": {
    "Enabled": true
  },

  // 未测试 - Session保存在Redis中 (TinyFx.AspNet.Configuration.SessionToRedisSection)
  "SessionToRedis": {
    "Enabled": false,
    "ConnectionStringName": "default", // redis连接字符串名，对应配置：Redis:ConnectionStrings:Name
    "DatabaseIndex": -1,
    "IdleTimeout": "20", // Session过期时间,单位分钟
    "CookieHttpOnly": "true" // 指示客户端脚本是否可以访问cookie
  },

  // 未测试 - 输出缓存 (TinyFx.AspNet.Configuration.ResponseCachingSection)
  "ResponseCaching": {
    "Enabled": false,
    "MaxAge": 0 //缓存秒数
  },

  // 未测试 - 压缩 (TinyFx.AspNet.Configuration.ResponseCompressionSection)
  "ResponseCompression": {
    "Enabled": false
  },

  // 无效- 请求限制 (TinyFx.AspNet.Configuration.RequestLimitSection)
  "RequestLimit": {
    // 判断流程：获取IP,clientId和Verb+URL => 白名单 => IpRules => GeneralRules (取最严格限制)
    "EnableIpRateLimit": false, // 是否使用IP频率限制
    "EnableClientRateLimit": false, // 是否使用Client频率限制
    "EnableRedisStore": false, // 是否使用Redis存储策略（集群时）
    "RedisConnectionStringName": "default", // Redis连接名
    "RedisDatabaseIndex": -1,
    "IpRateLimit": {
      // IP请求频率限制
      "EnableEndpointRateLimiting": true, // true:仅启用基于端点速率限制的URL路径和HTTP动词,false:限制作用于任何端点的任何请求
      "StackBlockedRequests": false, // 指示是否应按以下顺序堆叠所有请求（包括被拒绝的请求）：天，小时，分钟，秒
      "DisableRateLimitHeaders": true, // 是否禁用X-Rate-Limit header
      "RealIpHeader": "X-Real-IP", // 由反向代理注入的真实ip标头的HTTP标头，默认情况下为X-Real-IP
      "ClientIdHeader": "X-ClientId", // 用于保存客户端标识符的HTTP标头，默认情况下为X-ClientId
      "HttpStatusCode": 429, // 发生速率限制时返回的HTTP状态代码，默认情况下，该值设置为429（请求过多）
      "QuotaExceededResponse": {
        // 表示QuotaExceeded响应的模型（内容类型，内容，状态码）
        "Content": "{{\"result\":null,\"isSuccess\":false,\"statusCode\":429,\"code\":\"#RequestRateLimit#\",\"message\":\"Quota exceeded. Maximum allowed: {0} per {1}. Please try again in {2} second(s).\",\"exception\":null}}",
        "ContentType": "application/json"
      },
      "IpWhitelist": [ "::1/10" ], // IP白名单: ::1/10, 192.168.0.0/24, 192.168.0.1-192.168.0.20
      "ClientWhitelist": [], // 客户端白名单
      "EndpointWhitelist": [], // Endpoint白名单
      "GeneralRules": [
        // 通用规则
        {
          "Endpoint": "*:/api/*", // HTTP动词和路径:get:/api/values, *:/api/*, *
          "Period": "1s", // 限速周期为1s, 1m, 1h, 1d
          "Limit": 2 // 客户端在定义的时间内可以发出的最大请求数
        }
      ],
      "IpRules": [
        // 覆盖特定IP的一般规则
        {
          "Ip": "172.28.99.242",
          "Rules": [
            {
              "Endpoint": "*:/api/*",
              "Period": "1s",
              "Limit": 2
            }
          ]
        }
      ]
    },
    "ClientRateLimit": {
      "EnableEndpointRateLimiting": true,
      "ClientIdHeader": "X-ClientId",
      "HttpStatusCode": 429,
      "EndpointWhitelist": [],
      "ClientWhitelist": [],
      "GeneralRules": [
        {
          "Endpoint": "*",
          "Period": "1s",
          "Limit": 2
        }
      ],
      "ClientRules": [
        {
          "ClientId": "cl-key-1",
          "Rules": [
            {
              "Endpoint": "*",
              "Period": "1s",
              "Limit": 10
            }
          ]
        }
      ]
    }
  },

  // #endregion ******** Asp.Net ********

  "AllowedHosts": "*"
}
